import { APIService } from '../api-service.js';
import { BaseQuiz } from '../quiz-helper.js';
import { QuizUser } from '../QuizUser.js';

export class RiskAnalysisQuiz extends BaseQuiz {
    constructor() {
        const config = {
            maxXP: 300,
            totalQuestions: 15,
            passPercentage: 70,
            levelThresholds: {
                basic: { questions: 5, minXP: 35 },
                intermediate: { questions: 10, minXP: 110 },
                advanced: { questions: 15, minXP: 235 }
            },
            performanceThresholds: [
                { threshold: 90, message: 'üèÜ Outstanding! You\'re a risk analysis expert!' },
                { threshold: 80, message: 'üëè Great job! You\'ve shown strong risk analysis skills!' },
                { threshold: 70, message: 'üëç Good work! You\'ve passed the quiz!' },
                { threshold: 0, message: 'üìö Consider reviewing risk analysis best practices and try again!' }
            ]
        };
        
        super(config);
        
        // Set the quiz name
        Object.defineProperty(this, 'quizName', {
            value: 'risk-analysis',
            writable: false,
            configurable: false,
            enumerable: true
        });
        
        // Initialize player state
        this.player = {
            name: '',
            experience: 0,
            tools: [],
            currentScenario: 0,
            questionHistory: []
        };

        // Initialize API service
        this.apiService = new APIService();

        // Initialize all screen elements
        this.gameScreen = document.getElementById('game-screen');
        this.outcomeScreen = document.getElementById('outcome-screen');
        this.endScreen = document.getElementById('end-screen');
        
        // Verify all required elements exist
        if (!this.gameScreen) {
            console.error('Game screen element not found');
            this.showError('Quiz initialization failed. Please refresh the page.');
            return;
        }
        
        if (!this.outcomeScreen) {
            console.error('Outcome screen element not found');
            this.showError('Quiz initialization failed. Please refresh the page.');
            return;
        }
        
        if (!this.endScreen) {
            console.error('End screen element not found');
            this.showError('Quiz initialization failed. Please refresh the page.');
            return;
        }

        // Basic Scenarios (IDs 1-5)
        this.basicScenarios = [
            {
                id: 1,
                level: 'Basic',
                title: 'Risk Severity Assessment',
                description: 'How do you determine the severity of a risk?',
                options: [
                    {
                        text: 'Consider number of affected parties, duration of effect, likelihood, and impact',
                        outcome: 'Perfect! Comprehensive risk severity assessment considers multiple factors.',
                        experience: 15,
                        isCorrect: true,
                        tool: 'Severity Assessment Framework'
                    },
                    {
                        text: 'Consider immediate impact on the system under test',
                        outcome: 'Whilst impact is important risk severity needs to take in broader consideration, like risk likelihood and impact on the user.',
                        experience: -5,
                        isCorrect: false
                    },
                    {
                        text: 'Consider the developers feedback and base severity on their expertise on the system under test',
                        outcome: 'Whilst a developers input can be important, the severity of a risk requires a more measured approach taking into consideration a range of factors.',
                        experience: -10,
                        isCorrect: false
                    },
                    {
                        text: 'Consider number of affected parties, duration of effect and impact',
                        outcome: 'While all these factors will form a structured assessment of the severity of a risk. Likelihood of the issue occurring is also a main factor that can\'t be left out.',
                        experience: 0,
                        isCorrect: false
                    }
                ]
            },
            {
                id: 2,
                level: 'Basic',
                title: 'Risk Likelihood Evaluation',
                description: 'What factors should you consider when evaluating the likelihood of a risk?',
                options: [
                    {
                        text: 'Historical occurrence, interaction frequency, known triggers, and prior experience',
                        outcome: 'Excellent! Multiple factors help determine likelihood accurately.',
                        experience: 15,
                        tool: 'Likelihood Assessment Tool'
                    },
                    {
                        text: 'Check prior occurrences of the same type of issue being raised',
                        outcome: 'All factors that affect risk likelihood which include frequency and triggers should be taken into consideration.',
                        experience: -5
                    },
                    {
                        text: 'Factor into the risk analysis report that all risks are equally likely',
                        outcome: 'Different risks have different likelihoods. Therefore, they require different overall risk level and prioritisation',
                        experience: -10
                    },
                    {
                        text: 'Take into consideration the current environment conditions',
                        outcome: 'Historical data should also be considered when determining risk likelihood. This type of data from supported environment types helps to evaluate the accuracy of a risk.',
                        experience: 0
                    }
                ]
            },
            {
                id: 3,
                level: 'Basic',
                title: 'Morning Risk Assessment',
                description: 'What\'s the first step in your morning risk routine?',
                options: [
                    {
                        text: 'Review time availability, device readiness, and project understanding',
                        outcome: 'Perfect! Morning assessment prevents day-long issues.',
                        experience: 15,
                        tool: 'Daily Risk Checklist'
                    },
                    {
                        text: 'Commence functional testing activates straight away to make sure coverage within time constraints are sufficiently met',
                        outcome: 'Risk assessment should always precede work on the system under test as there could be potential risks that may block testing activities. These risks would need communicating and resolving',
                        experience: -10
                    },
                    {
                        text: 'Wait for the morning project meeting so that the project manager can relay any project risks',
                        outcome: 'Proactive morning checks are recommended to potentially prevent problems in project readiness and to convey potential risk to project managers or clients that may block testing activities.',
                        experience: -5
                    },
                    {
                        text: 'Check emails for any information regarding the project and the system under test',
                        outcome: 'Whilst important, a comprehensive morning review of any supported client documentation including the operational project details is required.',
                        experience: 0
                    }
                ]
            },
            {
                id: 4,
                level: 'Basic',
                title: 'Risk Calculation',
                description: 'How do you calculate the overall risk level?',
                options: [
                    {
                        text: 'Multiply severity by likelihood ratings',
                        outcome: 'Excellent! This calculation provides accurate risk levels.',
                        experience: 15,
                        tool: 'Risk Calculator'
                    },
                    {
                        text: 'Consider the severity of the issue and base the overall risk on this',
                        outcome: 'Both severity and likelihood should be taken into consideration. If the severity of a risk is high but the likelihood of this occurring is extremely low. Then overall severity would be reduced',
                        experience: -10
                    },
                    {
                        text: 'Consider the likelihood of the issue occurring and base overall risk on this',
                        outcome: 'Severity of the risk must also be factored in. If the likelihood of a risk is high but the severity of this risk is extremely low. Then overall severity would be reduced',
                        experience: -5
                    },
                    {
                        text: 'Add severity and likelihood ratings to gain the overall risk calculation',
                        outcome: 'Multiplication of severity and likelihood is the formula used for overall risk level.',
                        experience: 0
                    }
                ]
            },
            {
                id: 5,
                level: 'Basic',
                title: 'Pre-Lunch Risk Check',
                description: 'What should you assess in your pre-lunch risk routine?',
                options: [
                    {
                        text: 'Progress rate, device status, new client information, and blocking issues',
                        outcome: 'Perfect! Mid-day check helps maintain progress.',
                        experience: 15,
                        tool: 'Progress Tracking'
                    },
                    {
                        text: 'Check the time remaining in the day for testing activities to factor in test coverage',
                        outcome: 'Whilst this is important to keep test coverage on track. Multiple factors need to be taken into consideration including device status and any new project information.',
                        experience: -5
                    },
                    {
                        text: 'Conduct a thorough risk assessment at the beginning of the day so updated assessments are not required',
                        outcome: 'Regular checks maintain efficiency as progress may be hindered for a number of factors including blocking issues or client requests.',
                        experience: -10
                    },
                    {
                        text: 'Report an updated risk assessment to the project manager towards the end of the days testing',
                        outcome: 'Mid-day assessments are essential as they allow for adjustments within the days testing activities.',
                        experience: 0
                    }
                ]
            }
        ];

        // Intermediate Scenarios (IDs 6-10)
        this.intermediateScenarios = [
            {
                id: 6,
                level: 'Intermediate',
                title: 'Project Timeline Risk',
                description: 'How do you assess timeline-related risks during project scoping?',
                options: [
                    {
                        text: 'Evaluate resource availability, information gathering time, fix windows, and timeline flexibility',
                        outcome: 'Excellent! Comprehensive timeline risk assessment.',
                        experience: 20,
                        tool: 'Timeline Risk Assessment'
                    },
                    {
                        text: 'Check the duration of time allocated for functional test activities on the system under test',
                        outcome: 'Multiple timeline factors need to be taken into consideration including planning and resource availability.',
                        experience: -15
                    },
                    {
                        text: 'Assume timelines are in a set format as delivered by the client and all activities are to be planned in relation to this',
                        outcome: 'Timeline flexibility requires assessment for potential deviations and additional coverage if required.',
                        experience: -10
                    },
                    {
                        text: 'Take resource availability into consideration to help with a set project timeline',
                        outcome: 'While this is important other factors should be taken into consideration including flexibility and planning time.',
                        experience: -5
                    }
                ]
            },
            {
                id: 7,
                level: 'Intermediate',
                title: 'Documentation Risk',
                description: 'What documentation risks should be assessed before testing?',
                options: [
                    {
                        text: 'Check documentation availability, detail level, business rules, and acceptance criteria',
                        outcome: 'Perfect! Documentation completeness is crucial.',
                        experience: 20,
                        tool: 'Documentation Review'
                    },
                    {
                        text: 'Check if documentation has been supplied by the client to form operational project details',
                        outcome: 'Documentation content also needs reviewing to determine quality and potential issues that may prevent testing activities.',
                        experience: -15
                    },
                    {
                        text: 'Commence testing activities without documentation presented by the client',
                        outcome: 'Whilst in some respects this can be achieved including exploratory testing to a certain degree. Documentation reviews prevent potential blocking issues to testing activities.',
                        experience: -10
                    },
                    {
                        text: 'Ensure front end URL\'s have been supplied by the client and can be accessed',
                        outcome: 'Whilst this is important, there are many other factors that need to be taken into consideration. Including, bug tracking details and access credentials or any areas out of scope.',
                        experience: -5
                    }
                ]
            },
            {
                id: 8,
                level: 'Intermediate',
                title: 'Environment Access Risk',
                description: 'How do you assess risks related to test environment access?',
                options: [
                    {
                        text: 'Verify access methods, specific requirements, user permissions, and environment stability',
                        outcome: 'Excellent! Complete access risk assessment.',
                        experience: 20,
                        tool: 'Access Risk Checklist'
                    },
                    {
                        text: 'Check a user can login can login to the environment specified by the URL or application provided by the client',
                        outcome: 'This behaviour is important. However, other factors need to be taken into consideration including permissions for multiple users.',
                        experience: -15
                    },
                    {
                        text: 'Assess access methods, specific requirements and user permissions',
                        outcome: 'Whilst all these factors are essential, environment stability needs to be taken into consideration. This could include actual environment completeness and any server downtime for development activities.',
                        experience: -10
                    },
                    {
                        text: 'Assess access methods, user permissions, and environment stability',
                        outcome: 'Whilst all these factors are essential, specific client requirements also needs to be taken into consideration. This could include version control and which versions/URL\'s should be under test',
                        experience: -5
                    }
                ]
            },
            {
                id: 9,
                level: 'Intermediate',
                title: 'Multi-User Impact',
                description: 'How do you assess risks of multiple users testing simultaneously?',
                options: [
                    {
                        text: 'Evaluate platform performance impact, potential conflicts, and workflow interruptions',
                        outcome: 'Perfect! Multi-user impact needs thorough assessment.',
                        experience: 20,
                        tool: 'Concurrent Testing Assessment'
                    },
                    {
                        text: 'Assess the impact of logging into the environment sequentially with different users',
                        outcome: 'This type of test should be carried out with multiple users simultaneously to evaluate potential performance issues.',
                        experience: -15
                    },
                    {
                        text: 'Assess the impact of logging into an environment with the same user on different tabs on the same browser type',
                        outcome: 'Whilst this is a valid test, logging into the environment with the same user on multiple devices should be taken into consideration.',
                        experience: -10
                    },
                    {
                        text: 'Assess the impact of logging in and out with the same user on multiple occasions',
                        outcome: 'Whilst this is a valid test, it doesn\'t assess the impact of multiple users access the system under test at the same time.',
                        experience: -5
                    }
                ]
            },
            {
                id: 10,
                level: 'Intermediate',
                title: 'Client Communication Risk',
                description: 'How do you assess risks in client communication channels?',
                options: [
                    {
                        text: 'Establish urgent contact methods, verify response times, and ensure clear escalation paths',
                        outcome: 'Excellent! Communication channel assessment.',
                        experience: 20,
                        tool: 'Communication Risk Assessment'
                    },
                    {
                        text: 'Promote email as the one communication channel',
                        outcome: 'Multiple client supported communication channels may be required. Also, response times need to be assessed to realise the best and quickest form of communication.',
                        experience: -15
                    },
                    {
                        text: 'Address communication issues when they arise during testing activities',
                        outcome: 'Proactive planning is required to maintain effective communication with the client throughout testing activities.',
                        experience: -10
                    },
                    {
                        text: 'Establish contact methods and verify response times with the client and project manager',
                        outcome: 'While these factors are important, escalation paths for any urgent issues also need to be verified for clarity and resolution of any points of failure.',
                        experience: -5
                    }
                ]
            }
        ];

        // Advanced Scenarios (IDs 11-15)
        this.advancedScenarios = [
            {
                id: 11,
                level: 'Advanced',
                title: 'High-Bug Environment',
                description: 'How do you assess risks when encountering a bug-heavy environment?',
                options: [
                    {
                        text: 'Evaluate impact on testing time, triage requirements, and need for additional verification',
                        outcome: 'Perfect! Comprehensive bug impact assessment.',
                        experience: 25,
                        tool: 'Bug Impact Analysis'
                    },
                    {
                        text: 'Continue following the planned test script and report findings at the end of the day to the project manager',
                        outcome: 'A high bug count generally needs a strategy adjustment involving certain coverage areas or resource availability which should also be relayed to the project manager.',
                        experience: -15
                    },
                    {
                        text: 'Reduce coverage of all areas to meet time constraints',
                        outcome: 'All areas need appropriate coverage. Any potential reduction in agreed coverage should be reported and agreed with the project manager.',
                        experience: -10
                    },
                    {
                        text: 'Document major bugs and build a backlog of notes for any minor issues',
                        outcome: 'All issues found need proper documentation and reporting. Progress should also be reported to the project manager for assessment of additional resources',
                        experience: -5
                    }
                ]
            },
            {
                id: 12,
                level: 'Advanced',
                title: 'Resource Change Risk',
                description: 'How do you handle risks from unexpected resource changes?',
                options: [
                    {
                        text: 'Assess impact on timeline, coverage, and team capability, then adjust plans accordingly',
                        outcome: 'Excellent! Resource change impact analysis.',
                        experience: 25,
                        tool: 'Resource Risk Management'
                    },
                    {
                        text: 'Continue with the original testing activities set out in planning and inform the project manager of progress at the end of the day',
                        outcome: 'Any resource changes need plan adjustment and project managers should be informed on potential impact so those adjustments can be made.',
                        experience: -15
                    },
                    {
                        text: 'Remove some areas under test from planning to meet agreed project timelines.',
                        outcome: 'Coverage areas should not necessarily be removed. Although a reduction in test coverage of non-priority areas could potentially be adjusted. This would need confirmation from the project manager and the client',
                        experience: -10
                    },
                    {
                        text: 'Assess the impact on timeline and report this information to the project manager',
                        outcome: 'Whilst this is an important factor, the impact on coverage should also be taken into consideration and reported to stakeholders involved in the project.',
                        experience: -5
                    }
                ]
            },
            {
                id: 13,
                level: 'Advanced',
                title: 'Late Stage Risks',
                description: 'How do you assess risks when major issues are found late in testing?',
                options: [
                    {
                        text: 'Evaluate fix timeline, regression impact, and remaining test time, then reprioritize',
                        outcome: 'Perfect! Late-stage issue impact assessment.',
                        experience: 25,
                        tool: 'Late-Stage Risk Analysis'
                    },
                    {
                        text: 'Reduce the remaining test areas to meet the project timeline set out in planning',
                        outcome: 'Reprioritising test areas rather than reducing them is better approach to deal with major issues. This should also be agreed with the project manager.',
                        experience: -15
                    },
                    {
                        text: 'Remove outstanding regression testing from planning as bug fixes and new features take priority',
                        outcome: 'Regression testing remains important area of issue verification. Instead of removing this completely, reprioritisation of regression areas should be taken into consideration and agreed with the project manager.',
                        experience: -10
                    },
                    {
                        text: 'Assess a route cause analysis for the client and developers to better understand a fix timeline',
                        outcome: 'Whilst this will help going forward for a new release. It doesn\'t help with reprioritisation of the current system under tests activities.',
                        experience: -5
                    }
                ]
            },
            {
                id: 14,
                level: 'Advanced',
                title: 'Client Requirement Changes',
                description: 'How do you assess risks when client requirements change during testing?',
                options: [
                    {
                        text: 'Analyse impact on timeline, coverage, and existing tests, then adjust strategy',
                        outcome: 'Excellent! Change impact analysis.',
                        experience: 25,
                        tool: 'Change Impact Assessment'
                    },
                    {
                        text: 'Continue with the original testing activities set out in planning',
                        outcome: 'Requirement changes require reassessment and plan updates.',
                        experience: -15
                    },
                    {
                        text: 'Test the new requirement areas as these are the most current set out by the client',
                        outcome: 'All requirements need coverage relating to priority and any set out in planning that are still relevant need testing.',
                        experience: -10
                    },
                    {
                        text: 'Analyse impact on test coverage and report this to the project manager',
                        outcome: 'Whilst coverage is important. Other factors need to be taken into consideration including impact on project time line and existing tests.',
                        experience: -5
                    }
                ]
            },
            {
                id: 15,
                level: 'Advanced',
                title: 'End of Project Risk Review',
                description: 'How do you assess risks at project completion?',
                options: [
                    {
                        text: 'Review project challenges, identify process improvements, and document lessons learned',
                        outcome: 'Perfect! Comprehensive project review.',
                        experience: 25,
                        tool: 'Project Review Framework'
                    },
                    {
                        text: 'Document all major issues in a project review',
                        outcome: 'While important all aspects need to be included for review including project challenges. These can then be reviewed for improvement moving forward.',
                        experience: -15
                    },
                    {
                        text: 'Document lessons learned in the project review',
                        outcome: 'Whilst this is an important factor in the review. It may not target exact areas where processes can be improved.',
                        experience: -10
                    },
                    {
                        text: 'Focus on successes achieved throughout the project and document them in the project review',
                        outcome: 'Both successes and challenges are essential to the project review. This promotes a way of carrying forward good process and highlights the need for process improvement',
                        experience: -5
                    }
                ]
            }
        ];

        // Initialize UI and add event listeners
        this.initializeEventListeners();

        this.isLoading = false;
    }

    showError(message) {
        const errorDiv = document.createElement('div');
        errorDiv.className = 'error-notification';
        errorDiv.setAttribute('role', 'alert');
        errorDiv.textContent = message;
        document.body.appendChild(errorDiv);
        setTimeout(() => errorDiv.remove(), 5000);
    }

    shouldEndGame() {
        // End game if we've answered all questions
        return this.player.questionHistory.length >= this.totalQuestions;
    }

    calculateScorePercentage() {
        // Calculate percentage based on correct answers
        const correctAnswers = this.player.questionHistory.filter(q => {
            return q.selectedAnswer && q.selectedAnswer.isCorrect === true;
        }).length;
        
        // Cap the questions answered at total questions
        const questionsAnswered = Math.min(this.player.questionHistory.length, this.totalQuestions);
        
        return questionsAnswered > 0 ? Math.round((correctAnswers / questionsAnswered) * 100) : 0;
    }

    async saveProgress() {
        // First determine the status based on clear conditions
        let status = 'in-progress';
        
        // Check for completion (all questions answered)
        if (this.player.questionHistory.length >= this.totalQuestions) {
            // Calculate percentage score based on correct answers
            const scorePercentage = this.calculateScorePercentage();
            status = scorePercentage >= this.passPercentage ? 'passed' : 'failed';
        }

        const progress = {
            experience: this.player.experience,
            tools: this.player.tools,
            currentScenario: this.player.currentScenario,
            questionHistory: this.player.questionHistory,
            lastUpdated: new Date().toISOString(),
            questionsAnswered: this.player.questionHistory.length,
            scorePercentage: this.calculateScorePercentage(),
            status: status
        };

        try {
            const username = localStorage.getItem('username');
            if (!username) {
                console.error('No user found, cannot save progress');
                return;
            }
            
            // Use user-specific key for localStorage
            const storageKey = `quiz_progress_${username}_${this.quizName}`;
            localStorage.setItem(storageKey, JSON.stringify(progress));
            
            console.log('Saving progress with status:', status, 'scorePercentage:', progress.scorePercentage);
            await this.apiService.saveQuizProgress(this.quizName, progress);
        } catch (error) {
            console.error('Failed to save progress:', error);
        }
    }

    async loadProgress() {
        try {
            const username = localStorage.getItem('username');
            if (!username) {
                console.error('No user found, cannot load progress');
                return false;
            }

            // Use user-specific key for localStorage
            const storageKey = `quiz_progress_${username}_${this.quizName}`;
            const savedProgress = await this.apiService.getQuizProgress(this.quizName);
            console.log('Raw API Response:', savedProgress);
            let progress = null;
            
            if (savedProgress && savedProgress.data) {
                // Normalize the data structure
                progress = {
                    experience: savedProgress.data.experience || 0,
                    tools: savedProgress.data.tools || [],
                    questionHistory: savedProgress.data.questionHistory || [],
                    currentScenario: savedProgress.data.currentScenario || 0,
                    status: savedProgress.data.status || 'in-progress',
                    scorePercentage: savedProgress.data.scorePercentage || 0
                };
                console.log('Normalized progress data:', progress);
            } else {
                // Try loading from localStorage as fallback
                const localData = localStorage.getItem(storageKey);
                if (localData) {
                    const parsed = JSON.parse(localData);
                    progress = parsed;
                    console.log('Loaded progress from localStorage:', progress);
                }
            }

            if (progress) {
                // Set the player state from progress
                this.player.experience = progress.experience || 0;
                this.player.tools = progress.tools || [];
                this.player.questionHistory = progress.questionHistory || [];
                this.player.currentScenario = progress.currentScenario || 0;

                // Ensure we're updating the UI correctly
                this.updateProgress();
                
                // Check quiz status and show appropriate screen
                if (progress.status === 'failed' || progress.status === 'passed') {
                    this.endGame(progress.status === 'failed');
                    return true;
                }

                return true;
            }
            return false;
        } catch (error) {
            console.error('Failed to load progress:', error);
            return false;
        }
    }

    getCurrentScenarios() {
        const totalAnswered = this.player.questionHistory.length;
        
        // Progress through levels based only on question count
        if (totalAnswered >= 10) {
            return this.advancedScenarios;
        } else if (totalAnswered >= 5) {
            return this.intermediateScenarios;
        }
        return this.basicScenarios;
    }

    getCurrentLevel() {
        const totalAnswered = this.player.questionHistory.length;
        
        // Progress through levels based only on question count
        if (totalAnswered >= 10) {
            return 'Advanced';
        } else if (totalAnswered >= 5) {
            return 'Intermediate';
        }
        return 'Basic';
    }

    displayScenario() {
        console.log('[RiskAnalysisQuiz] Starting displayScenario method');
        
        // Ensure all required elements exist in the DOM
        if (!this.ensureRequiredElementsExist()) {
            console.error('[RiskAnalysisQuiz] Required elements could not be created. Stopping displayScenario.');
            this.showError('Quiz initialization failed. Please refresh the page.');
            return;
        }
        
        const currentScenarios = this.getCurrentScenarios();
        console.log('[RiskAnalysisQuiz] currentScenarios:', currentScenarios);
        const questionCount = this.player.questionHistory.length;
        console.log('[RiskAnalysisQuiz] questionCount:', questionCount);
        
        // Check if we've answered all questions
        if (this.shouldEndGame()) {
            console.log('[RiskAnalysisQuiz] Ending game - all questions answered');
            this.endGame(false);
            return;
        }

        // Get the next scenario based on current progress
        let scenario;
        
        // Reset currentScenario based on the current level
        if (questionCount < 5) {
            // Basic questions (0-4)
            console.log('[RiskAnalysisQuiz] Selecting from basicScenarios, index:', questionCount);
            scenario = this.basicScenarios[questionCount];
            this.player.currentScenario = questionCount;
        } else if (questionCount < 10) {
            // Intermediate questions (5-9)
            console.log('[RiskAnalysisQuiz] Selecting from intermediateScenarios, index:', questionCount - 5);
            scenario = this.intermediateScenarios[questionCount - 5];
            this.player.currentScenario = questionCount - 5;
        } else if (questionCount < 15) {
            // Advanced questions (10-14)
            console.log('[RiskAnalysisQuiz] Selecting from advancedScenarios, index:', questionCount - 10);
            scenario = this.advancedScenarios[questionCount - 10];
            this.player.currentScenario = questionCount - 10;
        }

        if (!scenario) {
            console.error('[RiskAnalysisQuiz] No scenario found for current progress. Question count:', questionCount);
            this.endGame(true);
            return;
        }
        
        console.log('[RiskAnalysisQuiz] Selected scenario:', scenario.id, scenario.title);

        // Store current question number for consistency
        this.currentQuestionNumber = questionCount + 1;
        
        // Show level transition message at the start of each level or when level changes
        const currentLevel = this.getCurrentLevel();
        console.log('[RiskAnalysisQuiz] Current level:', currentLevel);
        const previousLevel = questionCount > 0 ? 
            (questionCount <= 5 ? 'Basic' : 
             questionCount <= 10 ? 'Intermediate' : 'Advanced') : null;
            
        if (questionCount === 0 || 
            (questionCount === 5 && currentLevel === 'Intermediate') || 
            (questionCount === 10 && currentLevel === 'Advanced')) {
            const transitionContainer = document.getElementById('level-transition-container');
            if (transitionContainer) {
                transitionContainer.innerHTML = ''; // Clear any existing messages
                
                const levelMessage = document.createElement('div');
                levelMessage.className = 'level-transition';
                levelMessage.setAttribute('role', 'alert');
                levelMessage.textContent = `Starting ${currentLevel} Questions`;
                
                transitionContainer.appendChild(levelMessage);
                transitionContainer.classList.add('active');
                
                // Update the level indicator
                const levelIndicator = document.getElementById('level-indicator');
                if (levelIndicator) {
                    levelIndicator.textContent = `Level: ${currentLevel}`;
                }
                
                // Remove the message and container height after animation
                setTimeout(() => {
                    transitionContainer.classList.remove('active');
                    setTimeout(() => {
                        transitionContainer.innerHTML = '';
                    }, 300); // Wait for height transition to complete
                }, 3000);
            }
        }

        // Update scenario display - elements should exist after ensureRequiredElementsExist
        const titleElement = document.getElementById('scenario-title');
        const descriptionElement = document.getElementById('scenario-description');
        const optionsContainer = document.getElementById('options-container');

        console.log('[RiskAnalysisQuiz] DOM elements:', {
            titleElement: !!titleElement,
            descriptionElement: !!descriptionElement,
            optionsContainer: !!optionsContainer
        });

        // Double-check for element existence
        if (!titleElement || !descriptionElement || !optionsContainer) {
            console.error('[RiskAnalysisQuiz] Required elements not found even after ensureRequiredElementsExist');
            this.showError('Quiz initialization failed. Required elements not found.');
            return;
        }

        titleElement.textContent = scenario.title;
        descriptionElement.textContent = scenario.description;

        // Update question counter immediately
        const questionProgress = document.getElementById('question-progress');
        if (questionProgress) {
            questionProgress.textContent = `Question: ${this.currentQuestionNumber}/${this.totalQuestions}`;
        }

        // Create a copy of options with their original indices
        const shuffledOptions = scenario.options.map((option, index) => ({
            ...option,
            originalIndex: index
        }));

        // Shuffle the options
        for (let i = shuffledOptions.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [shuffledOptions[i], shuffledOptions[j]] = [shuffledOptions[j], shuffledOptions[i]];
        }

        optionsContainer.innerHTML = '';
        console.log('[RiskAnalysisQuiz] Adding', shuffledOptions.length, 'options to container');

        shuffledOptions.forEach((option, index) => {
            const optionElement = document.createElement('div');
            optionElement.className = 'option';
            optionElement.innerHTML = `
                <input type="radio" 
                    name="option" 
                    value="${option.originalIndex}" 
                    id="option${index}"
                    tabindex="0"
                    aria-label="${option.text}"
                    role="radio">
                <label for="option${index}">${option.text}</label>
            `;
            optionsContainer.appendChild(optionElement);
        });

        console.log('[RiskAnalysisQuiz] Options added to container, updating progress');
        this.updateProgress();

        // Initialize timer for the new question
        console.log('[RiskAnalysisQuiz] Initializing timer');
        this.initializeTimer();
        console.log('[RiskAnalysisQuiz] displayScenario complete');
    }

    async handleAnswer() {
        if (this.isLoading) return;
        
        const submitButton = document.querySelector('.submit-button');
        if (submitButton) {
            submitButton.disabled = true;
        }

        // Clear the timer when an answer is submitted
        if (this.questionTimer) {
            clearInterval(this.questionTimer);
        }
        
        try {
            this.isLoading = true;
            const selectedOption = document.querySelector('input[name="option"]:checked');
            if (!selectedOption) return;

            const currentScenarios = this.getCurrentScenarios();
            const scenario = currentScenarios[this.player.currentScenario];
            const originalIndex = parseInt(selectedOption.value);
            
            const selectedAnswer = scenario.options[originalIndex];

            // Update player experience with bounds
            this.player.experience = Math.max(0, Math.min(this.config.maxXP, this.player.experience + selectedAnswer.experience));

            // Calculate time spent on this question
            const timeSpent = this.questionStartTime ? Date.now() - this.questionStartTime : null;

            // Add to question history
            this.player.questionHistory.push({
                scenario: scenario,
                selectedAnswer: selectedAnswer,
                isCorrect: selectedAnswer.isCorrect === true,
                timeSpent: timeSpent,
                timedOut: false
            });

            // Increment current scenario
            this.player.currentScenario++;

            // Save progress
            await this.saveProgress();

            // Also save quiz result and update display
            const username = localStorage.getItem('username');
            if (username) {
                const quizUser = new QuizUser(username);
                const scorePercentage = this.calculateScorePercentage();
                
                await quizUser.updateQuizScore(
                    this.quizName,
                    scorePercentage,
                    this.player.experience,
                    this.player.tools,
                    this.player.questionHistory,
                    this.player.questionHistory.length
                );
            }

            // Show outcome screen
            if (this.gameScreen && this.outcomeScreen) {
                this.gameScreen.classList.add('hidden');
                this.outcomeScreen.classList.remove('hidden');
            }
            
            // Update outcome display
            let outcomeText = selectedAnswer.outcome;
            document.getElementById('outcome-text').textContent = outcomeText;
            
            // Update result display
            const resultElement = document.getElementById('result-text');
            if (resultElement) {
                resultElement.textContent = selectedAnswer.isCorrect ? 'Correct!' : 'Incorrect';
                resultElement.className = selectedAnswer.isCorrect ? 'correct' : 'incorrect';
            }
            
            if (selectedAnswer.tool) {
                document.getElementById('tool-gained').textContent = `Tool acquired: ${selectedAnswer.tool}`;
                if (!this.player.tools.includes(selectedAnswer.tool)) {
                    this.player.tools.push(selectedAnswer.tool);
                }
            } else {
                document.getElementById('tool-gained').textContent = '';
            }

            this.updateProgress();
            
            // Check if game should end after this answer
            if (this.shouldEndGame()) {
                // If we've answered all questions, end the game
                await this.endGame(false);
            }
        } catch (error) {
            console.error('Failed to handle answer:', error);
            this.showError('Failed to save your answer. Please try again.');
        } finally {
            this.isLoading = false;
            if (submitButton) {
                submitButton.disabled = false;
            }
        }
    }

    async endGame(failed = false) {
        this.gameScreen.classList.add('hidden');
        this.outcomeScreen.classList.add('hidden');
        this.endScreen.classList.remove('hidden');

        // Hide the progress card on the end screen
        const progressCard = document.querySelector('.quiz-header-progress');
        if (progressCard) {
            progressCard.style.display = 'none';
        }

        // Calculate score based on correct answers
        const scorePercentage = this.calculateScorePercentage();
        const isPassed = scorePercentage >= this.passPercentage;
        
        // Determine final status
        const finalStatus = failed ? 'failed' : (isPassed ? 'passed' : 'failed');
        
        // Save the final quiz result with pass/fail status
        const username = localStorage.getItem('username');
        if (username) {
            try {
                const user = new QuizUser(username);
                console.log('Setting final quiz status:', { status: finalStatus, score: scorePercentage });
                
                const result = {
                    score: scorePercentage,
                    scorePercentage: scorePercentage,
                    status: finalStatus,
                    experience: this.player.experience,
                    questionHistory: this.player.questionHistory,
                    questionsAnswered: this.player.questionHistory.length,
                    lastUpdated: new Date().toISOString()
                };

                // Save to QuizUser
                await user.updateQuizScore(
                    this.quizName,
                    result.scorePercentage,
                    result.experience,
                    this.player.tools,
                    result.questionHistory,
                    result.questionsAnswered,
                    finalStatus
                );

                // Save directly via API
                console.log('Saving final progress to API:', result);
                await this.apiService.saveQuizProgress(this.quizName, result);
                
                // Clear quiz local storage
                this.clearQuizLocalStorage(username, this.quizName);
            } catch (error) {
                console.error('Error saving final quiz score:', error);
            }
        }

        document.getElementById('final-score').textContent = `Final Score: ${scorePercentage}%`;
       
        // Update the quiz complete header based on status
        const quizCompleteHeader = document.querySelector('#end-screen h2');
        if (quizCompleteHeader) {
            quizCompleteHeader.textContent = isPassed ? 'Quiz Complete!' : 'Quiz Failed!';
        }

        const performanceSummary = document.getElementById('performance-summary');
        if (!isPassed) {
            performanceSummary.textContent = `Quiz failed. You scored ${scorePercentage}% but needed at least ${this.passPercentage}% to pass.`;
            // Hide restart button if failed
            const restartBtn = document.getElementById('restart-btn');
            if (restartBtn) {
                restartBtn.style.display = 'none';
            }
            // Add failed class to quiz container for styling
            const quizContainer = document.getElementById('quiz-container');
            if (quizContainer) {
                quizContainer.classList.add('failed');
            }
        } else {
            const threshold = this.config.performanceThresholds.find(t => t.threshold <= scorePercentage);
            if (threshold) {
                performanceSummary.textContent = threshold.message;
            } else {
                performanceSummary.textContent = 'Quiz completed successfully!';
            }
        }

        // Generate question review list
        const reviewList = document.getElementById('question-review');
        if (reviewList) {
            reviewList.innerHTML = ''; // Clear existing content
            this.player.questionHistory.forEach((record, index) => {
                const reviewItem = document.createElement('div');
                reviewItem.className = 'review-item';
                
                const isCorrect = record.isCorrect;
                reviewItem.classList.add(isCorrect ? 'correct' : 'incorrect');
                
                reviewItem.innerHTML = `
                    <h4>Question ${index + 1}</h4>
                    <p class="scenario">${record.scenario.description}</p>
                    <p class="answer"><strong>Your Answer:</strong> ${record.selectedAnswer.text}</p>
                    <p class="outcome"><strong>Outcome:</strong> ${record.selectedAnswer.outcome}</p>
                    <p class="result"><strong>Result:</strong> ${isCorrect ? 'Correct' : 'Incorrect'}</p>
                `;
                
                reviewList.appendChild(reviewItem);
            });
        }

        this.generateRecommendations();
    }
    
    clearQuizLocalStorage(username, quizName) {
        const variations = [
            quizName,                                              // original
            quizName.toLowerCase(),                               // lowercase
            quizName.toUpperCase(),                               // uppercase
            quizName.replace(/-/g, ''),                           // no hyphens
            quizName.replace(/([A-Z])/g, '-$1').toLowerCase(),    // kebab-case
            quizName.replace(/-([a-z])/g, (_, c) => c.toUpperCase()), // camelCase
            quizName.replace(/-/g, '_'),                          // snake_case
        ];

        variations.forEach(variant => {
            localStorage.removeItem(`quiz_progress_${username}_${variant}`);
            localStorage.removeItem(`quizResults_${username}_${variant}`);
        });
    }

    /**
     * Ensures all required elements exist in the DOM
     * @returns {boolean} - True if all required elements exist
     */
    ensureRequiredElementsExist() {
        console.log('[RiskAnalysisQuiz] Checking required elements');
        const requiredElements = [
            { id: 'scenario-title', type: 'h2', parent: '#game-screen', fallbackClass: 'scenario-title' },
            { id: 'scenario-description', type: 'p', parent: '#game-screen', fallbackClass: 'scenario-description' },
            { id: 'options-container', type: 'div', parent: '#game-screen', fallbackClass: 'options-container' },
            { id: 'question-progress', type: 'div', parent: '.quiz-header-progress', fallbackClass: 'question-info' },
            { id: 'level-indicator', type: 'div', parent: '.quiz-header-progress', fallbackClass: 'level-info' }
        ];
        
        let allExist = true;
        
        requiredElements.forEach(element => {
            // Check if element exists
            let domElement = document.getElementById(element.id);
            
            // If it doesn't exist, try to create it
            if (!domElement) {
                console.log(`[RiskAnalysisQuiz] Element ${element.id} not found, attempting to create`);
                
                try {
                    const parentElement = document.querySelector(element.parent);
                    if (!parentElement) {
                        console.error(`[RiskAnalysisQuiz] Parent element ${element.parent} not found`);
                        allExist = false;
                        return;
                    }
                    
                    domElement = document.createElement(element.type);
                    domElement.id = element.id;
                    if (element.fallbackClass) {
                        domElement.className = element.fallbackClass;
                    }
                    
                    // Special handling for specific elements
                    if (element.id === 'options-container') {
                        // Options container should be placed in a specific position
                        const submitButton = parentElement.querySelector('.submit-button');
                        if (submitButton) {
                            parentElement.insertBefore(domElement, submitButton);
                        } else {
                            parentElement.appendChild(domElement);
                        }
                    } else if (element.id === 'question-progress' || element.id === 'level-indicator') {
                        // Progress elements go into the header
                        parentElement.appendChild(domElement);
                        
                        // Initialize with default text
                        if (element.id === 'question-progress') {
                            domElement.textContent = 'Question: 1/15';
                        } else if (element.id === 'level-indicator') {
                            domElement.textContent = 'Level: Basic';
                        }
                    } else {
                        // Default placement
                        parentElement.appendChild(domElement);
                    }
                    
                    console.log(`[RiskAnalysisQuiz] Created element ${element.id}`);
                } catch (error) {
                    console.error(`[RiskAnalysisQuiz] Failed to create element ${element.id}:`, error);
                    allExist = false;
                }
            }
        });
        
        // Ensure the game screen is visible
        const gameScreen = document.getElementById('game-screen');
        if (gameScreen) {
            gameScreen.classList.remove('hidden');
        }
        
        // Ensure outcome and end screens are hidden
        const outcomeScreen = document.getElementById('outcome-screen');
        if (outcomeScreen) {
            outcomeScreen.classList.add('hidden');
        }
        
        const endScreen = document.getElementById('end-screen');
        if (endScreen) {
            endScreen.classList.add('hidden');
        }
        
        console.log('[RiskAnalysisQuiz] Required elements check completed, result:', allExist);
        return allExist;
    }

    async startGame() {
        console.log('[RiskAnalysisQuiz] Starting game');
        try {
            this.isLoading = true;
            
            // First attempt to load any existing progress
            const progressLoaded = await this.loadProgress();
            console.log('[RiskAnalysisQuiz] Progress loaded:', progressLoaded);
            
            if (!progressLoaded) {
                console.log('[RiskAnalysisQuiz] No progress found, starting new game');
                // If no progress was loaded, initialize a new player state
                const username = localStorage.getItem('username');
                this.player = {
                    name: username || '',
                    experience: 0,
                    tools: [],
                    currentScenario: 0,
                    questionHistory: []
                };
            }
            
            // Ensure required DOM elements exist
            if (!this.ensureRequiredElementsExist()) {
                console.error('[RiskAnalysisQuiz] Required elements could not be created');
                this.showError('Quiz initialization failed. Please refresh the page.');
                return;
            }
            
            // Initialize timer settings
            await this.initializeTimerSettings();
            
            // Show the game screen
            if (this.gameScreen) {
                this.gameScreen.classList.remove('hidden');
            }
            
            // Hide outcome and end screens
            if (this.outcomeScreen) {
                this.outcomeScreen.classList.add('hidden');
            }
            
            if (this.endScreen) {
                this.endScreen.classList.add('hidden');
            }
            
            // Update progress display
            this.updateProgress();
            
            // Display the first scenario
            this.displayScenario();
            
            // Initialize guide button if enabled
            await this.initializeGuideSettings();
            
            console.log('[RiskAnalysisQuiz] Game started successfully');
        } catch (error) {
            console.error('[RiskAnalysisQuiz] Error starting game:', error);
            this.showError('Failed to start the quiz. Please refresh and try again.');
        } finally {
            this.isLoading = false;
        }
    }
}

// Initialize quiz when the page loads
document.addEventListener('DOMContentLoaded', () => {
    // Clear any existing quiz instances before starting this quiz
    BaseQuiz.clearQuizInstances('risk-analysis');
    
    const quiz = new RiskAnalysisQuiz();
    quiz.startGame();
});